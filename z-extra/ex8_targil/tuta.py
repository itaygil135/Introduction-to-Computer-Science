
from nonogram import *


def test_solve_nonogram():
    for constraints, solution in (
            (
                    [[[2], [2, 1], [1, 3], [1, 1, 1, 1], [1, 1, 5],
                      [1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1],
                      [1, 1, 1, 1],
                      [1, 1, 4, 3], [4, 3, 2], [1, 1, 1, 1, 1],
                      [7, 2, 1],
                      [1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1],
                      [1, 1, 5, 3],
                      [1, 1, 5, 1, 1], [1, 1, 2, 2, 1, 1],
                      [1, 1, 2, 2, 1, 1], [1, 1, 1, 1, 5],
                      [1, 1, 2, 2, 1, 1]],
                     [[1, 2], [6, 9], [1, 1], [16], [1, 1, 1],
                      [1, 7, 1],
                      [2, 1, 2, 6], [2, 2, 2], [1, 2, 2, 6],
                      [1, 1, 1, 1, 6, 1], [2, 3, 2, 1, 1],
                      [1, 1, 1, 2, 10], [4, 2, 2, 1, 1, 1], [11],
                      [1]]],
                    [
                        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0],
                         [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                         [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                         [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                         [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0],
                         [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                         [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
                         [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                         [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
                         [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                         [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
                         [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0]]
                    ]
            ),
            (
                    [[[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]]],
                    [
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]]]
            ),
    ):
        actual = solve_nonogram(constraints)
        assert sorted(actual) == sorted(solution), \
            f"Input:\n" \
            f"constraints: {constraints}\n" \
            f"Expected: {solution}\n" \
            f"Actual: {actual}"




def real_test_solve_easy_nonogram1():
    for constraints, solution in (
            (
                    (
                            [[[4], [3, 1], [2, 1, 1], [1, 2, 1], [2, 2, 1, 1],
                              [3, 1, 1, 1], [1, 1, 1, 2], [3, 5], [1, 1, 2],
                              [2, 2, 1], [1, 3, 1], [3, 1], [1, 1], [4], [4]],
                             [[5, 2, 2], [3, 2, 1, 1, 3], [2, 1, 5, 2],
                              [1, 1, 3, 1, 2], [1, 2, 8], [2, 1, 1, 1, 1],
                              [1, 3],
                              [1, 1, 4], [1, 2], [2]]],
                            [[1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                             [1, 1, 0, 1, 0, 1, 0, 0, 0, 0],
                             [1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                             [1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 1, 1, 0, 1, 0, 1, 0, 1],
                             [1, 0, 0, 1, 0, 0, 1, 0, 1, 1],
                             [1, 1, 1, 0, 1, 1, 1, 1, 1, 0],
                             [0, 0, 1, 0, 1, 0, 1, 1, 0, 0],
                             [0, 1, 1, 0, 1, 1, 0, 1, 0, 0],
                             [1, 0, 1, 1, 1, 0, 0, 1, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                             [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
                             [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                             [0, 0, 1, 1, 1, 1, 0, 0, 0, 0]]
                    )
            )
    ):
        actual = solve_easy_nonogram(constraints)
        assert actual == solution, \
            f"Input:\n" \
            f"constraints: {constraints}\n" \
            f"Expected: {solution}\n" \
            f"Actual: {actual}"

def real_test_solve_easy_nonogram():
    for constraints, solution in (
            (
                    (
                            [[[4], [3, 1], [2, 1, 1], [1, 2, 1], [2, 2, 1, 1],
                              [3, 1, 1, 1], [1, 1, 1, 2], [3, 5], [1, 1, 2],
                              [2, 2, 1], [1, 3, 1], [3, 1], [1, 1], [4], [4]],
                             [[5, 2, 2], [3, 2, 1, 1, 3], [2, 1, 5, 2],
                              [1, 1, 3, 1, 2], [1, 2, 8], [2, 1, 1, 1, 1],
                              [1, 3],
                              [1, 1, 4], [1, 2], [2]]],
                            [[1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                             [1, 1, 0, 1, 0, 1, 0, 0, 0, 0],
                             [1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                             [1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 1, 1, 0, 1, 0, 1, 0, 1],
                             [1, 0, 0, 1, 0, 0, 1, 0, 1, 1],
                             [1, 1, 1, 0, 1, 1, 1, 1, 1, 0],
                             [0, 0, 1, 0, 1, 0, 1, 1, 0, 0],
                             [0, 1, 1, 0, 1, 1, 0, 1, 0, 0],
                             [1, 0, 1, 1, 1, 0, 0, 1, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                             [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
                             [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                             [0, 0, 1, 1, 1, 1, 0, 0, 0, 0]]
                    ),
                    (
                            [[[6], [13], [5], [13], [1, 11, 1],
                              [1, 1, 1, 1, 1, 1, 1], [11]],
                             [[1], [1, 1], [2, 1], [2, 4], [5, 1], [7], [5, 1],
                              [7], [5, 1], [1, 4], [1, 2, 1], [1, 4],
                              [1, 2, 1], [1, 1, 1], [1, 1], [1]]],
                            [[0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                             [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                             [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]]
                    ),
                    (
                            [[[5], [2, 2], [5], [5], [3], [1], [1], [1], [1],
                              [1], [1], [1], [1], [1], [1], [3], [2], [2], [2],
                              [1]], [[4], [5, 2, 1], [1, 18], [5, 1, 1], [4]]],
                            [[1, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 0, 1, 0, 0],
                             [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0],
                             [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0],
                             [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0],
                             [0, 1, 1, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0],
                             [0, 1, 1, 0, 0], [0, 0, 1, 0, 0]]
                    ),
                    (
                            [[[2], [2, 1], [1, 3], [1, 1, 1, 1], [1, 1, 5],
                              [1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1],
                              [1, 1, 1, 1],
                              [1, 1, 4, 3], [4, 3, 2], [1, 1, 1, 1, 1],
                              [7, 2, 1],
                              [1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1],
                              [1, 1, 5, 3],
                              [1, 1, 5, 1, 1], [1, 1, 2, 2, 1, 1],
                              [1, 1, 2, 2, 1, 1], [1, 1, 1, 1, 5],
                              [1, 1, 2, 2, 1, 1]],
                             [[1, 2], [6, 9], [1, 1], [16], [1, 1, 1],
                              [1, 7, 1],
                              [2, 1, 2, 6], [2, 2, 2], [1, 2, 2, 6],
                              [1, 1, 1, 1, 6, 1], [2, 3, 2, 1, 1],
                              [1, 1, 1, 2, 10], [4, 2, 2, 1, 1, 1], [11],
                              [1]]],
                            [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0],
                             [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                             [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                             [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                             [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0],
                             [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                             [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
                             [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                             [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                             [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
                             [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0]]
                    ),
                    (
                            [[[5, 1], [6, 2], [1, 2, 2, 1, 1], [7],
                              [2, 2, 1, 1],
                              [1, 1, 3], [4, 2], [1, 1, 4], [11], [1, 7],
                              [1, 3, 4], [2, 1, 4, 3], [1, 4, 1, 1, 3],
                              [1, 4, 1, 1, 2], [2, 2, 4], [6], [3, 4],
                              [1, 3, 3], [4, 2], [3, 2]],
                             [[2], [1, 1], [2, 3, 4], [2, 2, 2, 2, 2],
                              [4, 1, 1, 4, 2], [4, 2, 2, 3, 4],
                              [2, 1, 1, 2, 6], [5, 3, 4, 3], [5, 4, 2],
                              [1, 1, 1, 2, 2, 3], [2, 2, 3, 4, 1], [4, 7],
                              [1, 6, 3], [1, 7], [1, 6]]],
                        [
                            [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, -1, 0, -1, -1, -1],
                            [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0],
                            [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, -1, 0, -1, -1, -1],
                            [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                            [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, -1, -1, -1],
                            [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                            [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0],
                            [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                            [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1],
                            [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],
                            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                            [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1],
                            [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1],
                            [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
                            [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
                            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
                            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0]]
                    )
            )
    ):
        actual = solve_easy_nonogram(constraints)
        assert actual == solution, \
            f"Input:\n" \
            f"constraints: {constraints}\n" \
            f"Expected: {solution}\n" \
            f"Actual: {actual}"





def test_get_row_variations():
    for (row, blocks), variations in (
            # empty row
            (([], []), [[]]),
            # full row
            (([1, 1, 0], [2]), [[1, 1, 0]]),
            # all options
            (([-1, -1, -1], [1]), [[1, 0, 0],
                                   [0, 1, 0],
                                   [0, 0, 1], ]),
            # all options 2
            (([-1, -1, -1], [2]), [[1, 1, 0],
                                   [0, 1, 1]]),
            # simple one
            (([-1, -1, -1, -1, -1, -1, -1, -1], [2, 3, 1]),
             [[1, 1, 0, 1, 1, 1, 0, 1]]),
            # hard one
            (([-1, -1, -1, -1, -1, -1, -1, -1], [1, 2, 1]),
             [
                 [1, 0, 1, 1, 0, 1, 0, 0],
                 [1, 0, 1, 1, 0, 0, 1, 0],
                 [1, 0, 1, 1, 0, 0, 0, 1],
                 [1, 0, 0, 1, 1, 0, 1, 0],
                 [1, 0, 0, 1, 1, 0, 0, 1],
                 [1, 0, 0, 0, 1, 1, 0, 1],
                 [0, 1, 0, 1, 1, 0, 1, 0],
                 [0, 1, 0, 1, 1, 0, 0, 1],
                 [0, 1, 0, 0, 1, 1, 0, 1],
                 [0, 0, 1, 0, 1, 1, 0, 1],
             ]),
    ):
        actual = row_variations(row, blocks)
        assert sorted(actual) == sorted(variations), \
            f"Input:\n" \
            f"row: {row}, blocks: {blocks}\n" \
            f"Expected: {variations}\n" \
            f"Actual: {actual}"


def test_get_intersection_row():
    for rows, intersection in (
            # no rows
            # ([], []),
            # empty row
            ([[]], []),
            # empty rows
            ([[], []], []),
            # one row
            ([[1, 0, -1, 0, 1]], [1, 0, -1, 0, 1]),
            # row with unknown
            ([
                 [1, 0, -1],
                 [-1, 0, 1]
             ], [-1, 0, -1]
            ),
            # row with other values
            ([
                 [-1, 0, 1, 1],
                 [1, 1, 1, 1]
             ], [-1, -1, 1, 1]
            ),
            # many rows
            ([
                 [1, 1, 1, 0, 0],
                 [1, 1, 1, 0, 0],
                 [1, 1, 1, 0, 0],
                 [1, 1, 1, 0, 1],
                 [1, -1, 1, 0, 0],
             ], [1, -1, 1, 0, -1]
            ),
    ):
        actual = intersection_row(rows)
        assert actual == intersection, f"Input: {rows}\n" \
                                       f"Expected: {intersection}\n" \
                                       f"Actual: {actual}"




def test_solve_easy_nonogram():
    assert solve_easy_nonogram([[[], [4], [4], [2, 2], [1, 3]], [[], [2], [1], [2, 2], [1, 2]]]) == None
    assert solve_easy_nonogram([[[1,1], [], [1,1]], [[1,1], [], [1,1]]]) == [[1, 0, 1], [0, 0, 0], [1, 0, 1]]
    assert solve_easy_nonogram([[[1,2], [2], [1,2],[1,3],[3]], [[1,1], [2], [2,2],[1,3],[3]]]) == [[1, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 1], [1, 0, 1, 1, 1], [0, 0, 1, 1, 1]]

    assert solve_easy_nonogram([[[1,1,1,1,2,1,1,1,1],[2],[1,1,1,1,2,1,1,1,1],[1,1,1,6,1,1,1],
                                [1,1,1,2,1,1,1],[1,1,10,1,1],[1,1,2,1,1],[1,14,1],[1,2,1],[18],[2],[1,2],
                                [5,2,1],[3,4,5],[1,6,3],[8,1]],  #end rows
                               [[1,8,1],[1,2],[1,6,1,4],[1,1,2],[1,4,1,1,1],[1,1,1,1],[1,2,1,1,1,2],[1,1,1,1,3],
                                [16],[16],[1,1,1,1,3],[1,2,1,1,1,2],[1,1,1,1],[1,4,1,1,1],[1,1,2],[1,6,1,4],[1,2],
                                [1,8,1]]]) == [[1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                                              [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                              [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                                              [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
                                              [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1],
                                              [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
                                              [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1],
                                              [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                                              [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
                                              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                              [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                              [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                                              [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                                              [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                                              [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0],
                                              [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0]]
    assert solve_easy_nonogram([[[1],[2],[1]], [[1],[2],[1]]]) == [[-1, -1, -1], [-1, 1, -1], [-1, -1, -1]]




def test_row_variations():
    assert row_variations([1,0,1],[1,1]) == [[1,0,1]]
    assert row_variations([-1, -1], []) == [[0, 0]]
    assert row_variations([-1], [1]) == [[1]]
    assert row_variations([1], [1]) == [[1]]
    assert row_variations([-1, -1], [1]) == [[0, 1], [1, 0]]
    assert row_variations([-1, 1, -1], [1]) == [[0, 1, 0]]
    assert row_variations([-1, 1, -1], [2]) == [[0, 1, 1], [1, 1, 0]]
    assert row_variations([-1, 1, 0], [2]) == [[1, 1, 0]]
    assert row_variations([-1, 1, -1], [3]) == [[1, 1, 1]]
    assert row_variations([-1, 1, 1, -1], [3]) == [[0, 1, 1, 1], [1, 1, 1, 0]]
    assert row_variations([-1, -1, 1, -1], [3]) == [[0, 1, 1, 1], [1, 1, 1, 0]]
    assert row_variations([-1, -1, 1, -1, -1], [3]) == [[0, 0, 1, 1, 1], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0]]
    assert row_variations([-1, -1, 1, 0], [3]) == [[1, 1, 1, 0]]
    assert row_variations([-1, -1, 1, 0, -1], [3]) == [[1, 1, 1, 0, 0]]
    assert row_variations([-1, 1, 1, -1], [4]) == [[1, 1, 1, 1]]
    assert row_variations([-1, 1, 1, -1, -1, -1, -1, -1, -1], [2, 2, 2]) == [[0, 1, 1, 0, 1, 1, 0, 1, 1]]
    assert row_variations([-1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [2, 2, 2]) == [[0, 1, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                                 [0, 1, 1, 0, 1, 1, 0, 0, 1, 1],
                                                                                 [0, 1, 1, 0, 1, 1, 0, 1, 1, 0]]
    assert row_variations([-1, 1, -1, -1, 0, -1, -1, -1, -1, -1], [2, 2, 2]) == [[0, 1, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                                 [1, 1, 0, 0, 0, 1, 1, 0, 1, 1]]
    assert row_variations([-1, 1, -1, -1, -1, -1, -1, -1, -1, 0], [2, 2, 2]) == [[0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
                                                                                 [1, 1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                                 [1, 1, 0, 1, 1, 0, 0, 1, 1, 0],
                                                                                 [1, 1, 0, 1, 1, 0, 1, 1, 0, 0]]
    assert row_variations([-1, 1, -1, -1, -1, -1, -1, -1, 1, 0], [2, 2, 2]) == [[0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
                                                                                [1, 1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                                [1, 1, 0, 1, 1, 0, 0, 1, 1, 0]]
    assert row_variations([-1, 1, -1, -1, -1, -1, -1, -1, 1, 0], [4, 2]) == [[0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
                                                                             [1, 1, 1, 1, 0, 0, 0, 1, 1, 0]]
    assert row_variations([1, -1, -1, 1], [1]) == []
    assert row_variations([1, 0, 0, -1], [2, 1]) == []


test_row_variations()
test_solve_easy_nonogram()
test_get_intersection_row()
test_get_row_variations()
real_test_solve_easy_nonogram()
test_solve_nonogram()













"""
def _sudoku_helper(board,ind):
    if ind == SIZE * SIZE:
        print("found solution:")
        print_board(board)
        return

    row, col = ind // SIZE , ind % SIZE

    if board[row][col] != 0:
        _sudoku_helper(board, ind + 1)
        return

    for value in range(1, SIZE + 1):
        if ok_to_place(board, value, row, col):
            board[row][col] = value
            _sudoku_helper(board, ind + 1)
    board[row][col] = 0

def solve_sudoku(board):
    _sudoku_helper(board,0)
"""











"""" 

def is_possible(blocks, lst):
    n = len(lst)
    num_of_blocks = len(blocks)
    num_of_found_blocks = 0
    if (num_of_blocks == 0):
        if 1 in lst:
            return False
        return True
    else:
        i = 0
        index_1 = 0;
        index_0 = 0;
        while (i < num_of_blocks):
            while index_1 < n and lst[index_1] == 0:
                index_1 = index_1 + 1
            index_0 = index_1 + 1
            while index_0 < n and lst[index_0] == 1:
                index_0 = index_0 + 1
            if index_1 < n:
                block_len = index_0 - index_1
                num_of_found_blocks = num_of_found_blocks + 1
                if block_len != blocks[i]:
                    return False

                index_1 = index_0
            i = i + 1
        # in case not all blocks failed - return an error
        if num_of_blocks > num_of_found_blocks:
            return False
        # in case there are more blocks at the list, return an error
        for i in range(index_1, n):
            if lst[i] == 1:
                return False
        return True


def constraint_satisfactions(n, blocks):
    option_lst = []
    helper(option_lst, [], n, blocks)
    return option_lst


def helper(final_lst, lst, n, blocks):
    if len(lst) == n:
        if is_possible(blocks, lst):
            final_lst.append(lst[:])
        return
    r = [0, 1]
    for item in r:
        lst.append(item)
        helper(final_lst, lst, n, blocks)
        lst.pop()
    return

    def ok_to_place(value, row, i, blocks):
    return True


def _row_var_helper(lst,row,blocks,ind):
    if -1 not in row:
        lst.append(row[:])
        return

    if row[ind] != -1:
        _row_var_helper(lst,row,blocks,ind + 1)
        return
    black_or_white = [1, 0]

    for value in black_or_white:
        if ok_to_place(value, row, ind, blocks):
            row[ind] = value
            _row_var_helper(lst,row,blocks,ind + 1)
    row[ind] = -1

def row_variations(row, blocks):
    solution_list = []
    _row_var_helper(solution_list,row,blocks,0)
    return solution_list
print(row_variations([-1, -1, -1] , [1]))
"""