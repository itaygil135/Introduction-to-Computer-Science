
def is_possible(blocks, lst):
    n = len(lst)
    num_of_blocks = len(blocks)
    num_of_found_blocks = 0
    if (num_of_blocks == 0):
        if 1 in lst:
            return False         
        return True
    else:   
        i = 0
        index_1 = 0 ;
        index_0 = 0 ;
        while (i < num_of_blocks): 
            while index_1 < n and lst[index_1] == 0:
                index_1 = index_1 + 1
            index_0 = index_1 + 1
            while index_0 < n and lst[index_0] == 1:
                index_0 = index_0 + 1
            if index_1 < n:        
                block_len = index_0 - index_1
                num_of_found_blocks = num_of_found_blocks + 1           
                if block_len != blocks[i]:
                    return False
                
                index_1 = index_0
            i = i + 1
        # in case not all blocks failed - return an error
        if num_of_blocks > num_of_found_blocks:
            return False
        # in case there are more blocks at the list, return an error
        for i in range(index_1,n):
            if lst[i] ==1:
                return False
        return True
        
            



def constraint_satisfactions(n, blocks):
    option_lst = []
    helper(option_lst,[],n,blocks)
    return option_lst

def helper(final_lst, lst,n,blocks):
    if len(lst) == n:
        if is_possible(blocks, lst):
            final_lst.append(lst[:])
        return 
    r=[0,1]
    for item in r:
        lst.append(item)
        helper(final_lst,lst,n, blocks)
        lst.pop()
    return 
    
print(constraint_satisfactions (3,[1]))
print(constraint_satisfactions (3,[2]))
print(constraint_satisfactions (3,[1,1]))
print(constraint_satisfactions (4,[1,1]))
print(constraint_satisfactions (5,[2,1]))

#constraint_satisfactions(3, [1]) -> [ [1, 0, 0], [0, 1, 0] , [0, 0, 1]]
#constraint_satisfactions (3, [2]) -> [ [1, 1, 0], [0, 1, 1] ]
#constraint_satisfactions (3, [1, 1]) -> [ [1, 0, 1] ]
#constraint_satisfactions (4, [1, 1]) -> [ [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 0, 1]]
#constraint_satisfactions (5, [2, 1]) -> [ [1, 1, 0, 1, 0] , [1, 1, 0, 0, 1], [0, 1, 1, 0, 1] ]

